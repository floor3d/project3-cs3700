#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, copy
from textwrap import wrap #used to make strings into arrays

class Router:

    relations = {} #our relationships. IP : [cust/peer/prov]
    sockets = {} #our listening UDP connections. IP : socket
    ports = {} #the port of the neighbor. IP : port
    route_announcements = []
    forwarding_table = [] #needs network netmask localpref selfOrigin ASPath origin
    aggregated_ips = [] #ips that have been aggregated. {IP1, IP2, NEWIP}, {}. {}, ...
    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor),
                "dst": neighbor, "msg": {}  }))


    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message, custOnly = False):
        for key in self.relations:
            if key == network:
                if(not custOnly or self.relations.get(key) == "cust"):
                    self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))
                return
        network = self.findProperNetwork(network)
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))


    
    #figures out what kind of message it is and passes it on to the proper handler
    def handleMessage(self, msg):
        obj = json.loads(msg)
        msg_type = obj['type']
        self.route_announcements.append(msg) # add this announcement to a running list in case we need it later 
        if(msg_type == "update"):
            self.handleUpdate(obj)
        elif(msg_type == "data"):
            self.handleData(obj)
        elif(msg_type == "dump"):
            self.handleDump(obj)
        elif(msg_type == "withdraw"):
            self.handleWithdraw(obj)
        return


    #handles update message: copy announcement, add entry to forwarding table, send copy of announcement 
    def handleUpdate(self, msg):
        addr = self.forwarding_table_address(msg['msg']['network'], msg['msg']['netmask'])  
        if addr != -1:
            return
        else:
            obj = msg['msg']
            obj['src'] = msg['src']
            self.forwarding_table.append(copy.deepcopy(obj))
            # add this record to the forwarding table
        for item in range(len(self.forwarding_table)):
            # loop through forwarding table and update current records as necessary
            if "src" in self.forwarding_table[item]:
                self.forwarding_table[item]["peer"] = self.forwarding_table[item].pop("src")
        # next step: send a copy of this announcement to other routers as necessary
        obj = {}
        obj["type"] = "update"
        obj["msg"] = {
                    "network": msg['msg']['network'],
                    "netmask": msg['msg']['netmask'],
                    "ASPath": msg['msg']['ASPath']}
        obj['msg']['ASPath'].insert(0, self.asn) #add own asn to list

        self.agg_fw_table() #aggregate our forwarding table

        if(self.relations[msg['src']] == "cust"):
            #comes from customer 
            for neighbor in self.relations:
                obj['src']= self.our_addr(neighbor)
                obj['dst'] = neighbor
                if obj['dst'] != msg['src']:
                    self.send(obj['dst'], json.dumps(obj))
            return
        else:
            #comes from peer. We will not send this to other peers because that doesn't make us money
            for neighbor in self.relations:
                obj['src']= self.our_addr(neighbor)
                obj['dst'] = neighbor                
                if obj['dst'] != msg['src'] and self.relations[obj['dst']] == "cust":
                    self.send(obj['dst'], json.dumps(obj))

    # return index of matching forwarding table index
    def forwarding_table_address(self, network, netmask):
        return -1


    # handles data message. 
    def handleData(self, msg):
        obj = {}
        obj['src'] = self.our_addr(msg['src'])
        obj['dst'] = msg['dst']
        neighbor = self.findProperNetwork(msg['dst'])
        if(neighbor is None):
            #we can't find the route for this one. Send back with "no route" message.
            obj['dst'] = msg['src']
            obj['type'] = "no route"
            obj['msg'] = {}
            self.send(obj['dst'], json.dumps(obj))
        else:
            #if given from customer, send to everyone
            #if given from peer or provider, only send to customers

            obj['type'] = "data"
            obj['msg'] = msg['msg']

            if(self.relations[self.findProperNetwork(msg['src'])] != 'cust'):
                self.send(neighbor, json.dumps(obj), True) # only send to customers flag
                return
            self.send(neighbor, json.dumps(obj))
        
    #finds correct network to route to via forwarding table. returns None if not found.
    def findProperNetwork(self, ip):
        possibleRets = []
        orig = ip.split(".")
        temp = ip
        for i in range(len(orig)):
            orig[i] = bin(int(orig[i])).replace("0b","")
            orig[i] = orig[i].zfill(8)
        ip = ''.join(orig)
        for entry in self.forwarding_table:
            other = entry['network'].split(".")
            netmask_arr = entry['netmask'].split(".")
            for i in range(len(other)):
                other[i] = bin(int(other[i])).replace("0b","")
                other[i] = other[i].zfill(8)
            for i in range(len(netmask_arr)):
                netmask_arr[i] = bin(int(netmask_arr[i])).replace("0b","")
                netmask_arr[i] = netmask_arr[i].zfill(8)
            ip2 = ''.join(other)
            netmask2 = ''.join(netmask_arr)
            if ip == ip2:
                return entry
            for i in range(len(netmask2)):
                if netmask2[i] == '0' and ip[i-1] == ip2[i-1]:
                    possibleRets.append((entry, i))
                    break
                elif ip[i] != ip2[i]:
                    break

        if(len(possibleRets) == 0):
            return None
        elif len(possibleRets) == 1:
            return possibleRets[0][0]['peer']
        return self.findBestFittingNetwork(possibleRets)['peer']



    #finds the most specific / best fitting route for multiple possibilities.
    #possibleRets = listof [  (route_table_row, netmask_length)  ]
    def findBestFittingNetwork(self, possibleRets):
        winner = possibleRets[0]
        for i in range(len(possibleRets)):
            contender = possibleRets[i]
            if(contender[1] > winner[1]):
                winner = contender
            elif(contender[1] < winner[1]):
                continue
            elif(contender[0]['localpref'] > winner[0]['localpref']):
                winner = contender
            elif(contender[0]['localpref'] < winner[0]['localpref']):
                continue
            elif(contender[0]['selfOrigin'] and not winner[0]['selfOrigin']):
                winner = contender
            elif(not contender[0]['selfOrigin'] and winner[0]['selfOrigin']):
                continue
            elif(len(contender[0]['ASPath']) < len(winner[0]['ASPath'])):
                winner = contender
            elif(len(contender[0]['ASPath']) > len(winner[0]['ASPath'])):
                continue
            elif(self.hasBetterOrigin(contender[0]['origin'], winner[0]['origin'])):
                winner = contender
            elif(contender[0]['origin'] != winner[0]['origin']):
                continue
            elif(self.ipAddressLower(contender[0]['peer'], winner[0]['peer'])):
                winner = contender
        return winner[0]

    

    #is origin 1 better than origin 2?
    def hasBetterOrigin(self, one, two):
        if one == 'IGP' and two != 'IGP':
            return True
        if one == 'EGP' and two == 'UNK':
            return True
        return False

    

    #is ip 1 address lower than ip 2 address?
    def ipAddressLower(self, one, two):
        num1 = int(one.replace(".",""))
        num2 = int(two.replace(".",""))
        return num1 < num2


    #withdraw handler. removes routes from forwarding table and forwards msg if needed
    def handleWithdraw(self, msg):
        itemsToRemove = []
        for item in range(len(self.forwarding_table)):
            obj = {}
            obj["network"] = self.forwarding_table[item]["network"]
            obj["netmask"] = self.forwarding_table[item]["netmask"]
            if obj in msg["msg"] and msg["src"] == self.forwarding_table[item]["peer"]:
                itemsToRemove.append(item)

        i = len(self.forwarding_table) - 1
        while i >= 0:
            if(i in itemsToRemove):
                self.forwarding_table.pop(i)
            i -= 1

        self.disagg_netmasks(msg["msg"])

        obj = copy.deepcopy(msg)
        obj['src'] = self.our_addr(msg['src'])
        if(self.relations[msg['src']] == "cust"):
            for neighbor in self.relations:
                obj['dst'] = neighbor
                if obj['dst'] != msg['src']:
                    obj['src'] = self.our_addr(neighbor)
                    self.send(obj['dst'], json.dumps(obj))
            return
        else:
            for neighbor in self.relations:
                obj['dst'] = neighbor
                if obj['dst'] != msg['src'] and self.relations[obj['dst']] == "cust":
                    obj['src'] = self.our_addr(neighbor)
                    self.send(obj['dst'], json.dumps(obj))


    #handles aggregation of forwarding table
    #aggregate if 2 or more entires are adjacent + forward to same next-hop router + same attrs
    def agg_fw_table(self):
        toRemove = []
        toAdd = []
        for i in range(len(self.forwarding_table)):
            one = self.forwarding_table[i]
            for j in range(i, len(self.forwarding_table)):
                two = self.forwarding_table[j]
                if i == j:
                    continue
                if (one["netmask"] == two["netmask"] and one["localpref"] == two["localpref"] and one["ASPath"] == two["ASPath"] and one["origin"] == two["origin"] and one["selfOrigin"] == two["selfOrigin"] and one["peer"] == two["peer"]):
                    toRemove.append(one)
                    toRemove.append(two)
                    ip1 = copy.deepcopy(one)
                    ip2 = copy.deepcopy(two)
                    new_ip = copy.deepcopy(one)
                    new_ip["netmask"] = self.agg_netmasks(one["netmask"])
                    self.aggregated_ips.append({"ip1": ip1, "ip2": ip2, "new_ip": new_ip})
                    toAdd.append(new_ip)
        i = len(self.forwarding_table) - 1
        while i >= 0:
            if(self.forwarding_table[i] in toRemove):
                print("#" * 40)
                print("i will now remove this one from agg_fw")
                print(self.forwarding_table[i])
                print("#" * 40)
                self.forwarding_table.pop(i)
            i -= 1
     #   print("Heres the stuff i be adding")
     #   print("*" * 40)
     #   print(toAdd)
     #   print("*" * 40)
        self.forwarding_table.extend(toAdd)




    def agg_netmasks(self, one):
        one_arr = one.split(".")
        for i in range(len(one_arr)):
            one_arr[i] = bin(int(one_arr[i])).replace("0b","")
            one_arr[i] = one_arr[i].zfill(8)
        one_bits = ''.join(one_arr)
        for i in range(len(one_bits)):
            if one_bits[i] == '0' and one_bits[i-1] == '1':
                one_bits = one_bits[:i-1] + '0' + one_bits[i:]
        ret_arr = wrap(one_bits, 8) 
        for i in range(len(ret_arr)):
            ret_arr[i] = str(int(ret_arr[i], 2))
        
        return '.'.join(ret_arr)


    # take withdrawn msg and disaggregate route if necessary
    def disagg_netmasks(self, obj_arr):
        toAdd = []
        toRemove = []
        for obj in obj_arr:
            for i in range(len(self.aggregated_ips)):
                idx = -1
                if self.aggregated_ips[i]["new_ip"] in self.forwarding_table:
                    idx = self.forwarding_table.index(self.aggregated_ips[i]["new_ip"])
                if(obj["network"] == self.aggregated_ips[i]["ip1"]["network"] and obj["netmask"] == self.aggregated_ips[i]["ip1"]["netmask"]):
                    #remove new_ip item from forwarding table
                    #replace with ip2
                    #remove object from aggregated_ips because it is now disagreggated
                    toRemove.append(idx)
                    toAdd.append(self.aggregated_ips[i]["ip2"])
                if(obj["network"] == self.aggregated_ips[i]["ip2"]["network"] and obj["netmask"] == self.aggregated_ips[i]["ip2"]["netmask"]):
                    #remove new_ip item from forwarding table
                    #replace with ip1
                    #remove object from aggregated_ips because it is now disagreggated
                    toRemove.append(idx)
                    toAdd.append(self.aggregated_ips[i]["ip1"]) 
            for i in range(len(self.forwarding_table)):
                if(self.networkIsContainedIn(obj, self.forwarding_table[i])):
                    print("Network do be contained in", obj, "and", self.forwarding_table[i])
                    self.forwarding_table[i]["netmask"] = self.updateNetmaskWithExtraOne(self.forwarding_table[i]["netmask"])
                    print(self.forwarding_table[i]["netmask"])
                    print("@"* 50)
        i = len(self.forwarding_table) - 1
        while i >= 0:
            if(i in toRemove):
              #  print("#" * 40)
              #  print("i will now remove this one from disagg")
              #  print(self.forwarding_table[i])
              #  print("#" * 40)
                self.forwarding_table.pop(i)
            i -= 1
      #  print("Heres the stuff i be adding")
      #  print("*" * 40)
      #  print(toAdd)
      #  print("*" * 40)
        self.forwarding_table.extend(toAdd)


    def networkIsContainedIn(self, child, parent):
        network_child_arr = child['network'].split(".")
        netmask_child_arr = child['netmask'].split(".")
        network_parent_arr = parent['network'].split(".")
        netmask_parent_arr = parent['netmask'].split(".")

        for i in range(len(network_child_arr)):
            network_child_arr[i] = bin(int(network_child_arr[i])).replace("0b","")
            network_child_arr[i] = network_child_arr[i].zfill(8)
            network_parent_arr[i] = bin(int(network_parent_arr[i])).replace("0b","")
            network_parent_arr[i] = network_parent_arr[i].zfill(8)

        for i in range(len(netmask_parent_arr)):
            netmask_parent_arr[i] = bin(int(netmask_parent_arr[i])).replace("0b","")
            netmask_parent_arr[i] = netmask_parent_arr[i].zfill(8)
        child_ip = ''.join(network_child_arr)
        parent_ip = ''.join(network_parent_arr)
        netmask = ''.join(netmask_parent_arr)
        if parent_ip == child_ip:
            return True
        for i in range(len(netmask)):
            if netmask[i] == '0' and child_ip[i-1] == parent_ip[i-1]:
                return True
            elif child_ip[i] != parent_ip[i]:
                return False
        return False

    

    def updateNetmaskWithExtraOne(self, orig_str):
        orig = orig_str.split(".")
        for i in range(len(orig)):
            orig[i] = bin(int(orig[i])).replace("0b","")
            orig[i] = orig[i].zfill(8)
        netmask = ''.join(orig)
        idx = netmask.find("0")
        netmask = netmask[:idx] + "1" + netmask[idx + 1:]

        ret_arr = wrap(netmask, 8) 
        for i in range(len(ret_arr)):
            ret_arr[i] = str(int(ret_arr[i], 2))
        
        return '.'.join(ret_arr)
        
    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')
                self.handleMessage(msg)
                print("Received message '%s' from %s" % (msg, srcif))
        return


    #sends table message to sender of dump message
    def handleDump(self, msg):
        toSend = {}
        toSend['src'] = msg['dst']
        toSend['dst'] = msg['src']
        toSend['type'] = "table"
        toSend['msg'] = self.forwarding_table
        self.send(toSend['dst'], json.dumps(toSend))
        return

    

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
